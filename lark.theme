<?php
use Drupal\Core\Form\FormStateInterface;

function lark_preprocess_page(&$variables) {
  $shortcuts = shortcut_renderable_links();
  $variables['shortcuts'] = $shortcuts;
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function lark_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id = NULL) {
  // Work around for core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['lark_color'] = array(
    '#type'   => 'textfield',
    '#title'  => t('Primary color'),
    '#default_value' => theme_get_setting('lark_color'),
    '#description' => t('Provide a hexadecimal value to use as the theme\'s primary color.'),
  );
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function lark_forms_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  lark_forms_attach_form_id($form, $form_id);
  if ($form_id === 'views_exposed_form') {
    $display_id = str_replace('views-exposed-form-', '', $form['#id']);
    $display_id = str_replace('-', '_', $display_id);
    lark_forms_attach_views_display_id($form, $display_id);
  }
}

/**
 * Implements hook_theme_suggestions_form_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  // Add form suggestions for form--form-id.html.twig.
  $element = $variables['element'];
  $suggestions[] = 'form__' . str_replace('-', '_', $element['#form_id']);
  $suggestions[] = 'form__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#id']);
}

/**
 * Implements hook_theme_suggestions_container_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] != 'container') {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#type']);
    if (isset($element['#attributes']['data-twig-suggestion'])) {
      $suggestions[] = 'container__' . str_replace('-', '_', $element['#type']) . '__' . str_replace('-', '_', $element['#attributes']['data-twig-suggestion']);
    }
  }

  if(isset($element['#id'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#id']);
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['children']['#type']);
  }
  if (isset($variables['element']['#type']) && isset($element['#name'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#type']) . '__' . str_replace('-', '_', $element['#name']);
  }
  if (isset($variables['element']['#type']) && isset($element['#name']) && isset($element['#display_id'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#type']) . '__' . str_replace('-', '_', $element['#name']) . '__' . str_replace('-', '_', $element['#display_id']);
  }

}

/**
 * Implements hook_theme_suggestions_input_alter().
 *
 * @param $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestion_suffix = str_replace(['-'], '_', $element['#attributes']['data-twig-suggestion']);
    $suggestions[] = 'input__' . str_replace('-', '_', $element['#type']) . '__' . $suggestion_suffix;
  }
}

/**
 * Implements hook_theme_suggestions_select_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_select_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'select__' . str_replace('-', '_', $element['#attributes']['data-twig-suggestion']);
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function lark_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  foreach (\Drupal\Core\Render\Element::children($form) as $key) {
    $form[$key]['#attributes']['data-twig-suggestion'] = $form['#id'];
  }

  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form['#id'];
}

/**
 * Implements hook_theme_suggestions_form_element().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  $suggestions[] = 'form_element__type__' . str_replace('-', '_', $element['#type']);
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'form_element__type__' . str_replace('-', '_', $element['#type']) . '__' . str_replace('-', '_', $element['#attributes']['data-twig-suggestion']);
  }

  if (isset($element['#form_id'])) {
    $suggestions[] = 'form_element__form_id__' . str_replace('-', '_', $element['#form_id']);
    $suggestions[] = 'form_element__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#type']);
  }

  if (isset($element['#views_display_id'])) {
    $suggestions[] = 'form_element__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#views_display_id']);
    $suggestions[] = 'form_element__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#views_display_id']) . '__' . str_replace('-', '_', $element['#type']);
  }
}

/**
 * Implements hook_theme_suggestions_form_element_label().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#form_element_type'])) {
    $suggestions[] = 'form_element_label__type__' . str_replace('-', '_', $element['#form_element_type']);
  }
  if (isset($element['#form_id'])) {
    $suggestions[] = 'form_element_label__form-id__' . str_replace('-', '_', $element['#form_id']);
  }
  if (isset($element['#form_element_type']) && isset($element['#form_id'])) {
    $suggestions[] = 'form_element_label__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#form_element_type']);
  }
  if (isset($element['#views_display_id'])) {
    $suggestions[] = 'form_element_label__views_exposed_form__' . str_replace('-', '_', $element['#views_display_id']);
  }
  if (isset($element['#views_display_id']) && isset($element['#form_id'])) {
    $suggestions[] = 'form_element_label__views_exposed_form__' . str_replace('-', '_', $element['#views_display_id']) . '__' . str_replace('-', '_', $element['#form_element_type']);
  }

}

/**
 * Implements hook_preprocess_form_element().
 */
function lark_preprocess_form_element(array &$variables) {
  $element = $variables['element'];

  if (!isset($variables['label'])) {
    return;
  }

  if (isset($element['#form_id'])) {
    $variables['label']['#form_id'] = str_replace('-', '_', $element['#form_id']);
  }
  if (isset($element['#type'])) {
    $variables['label']['#form_element_type'] = str_replace('-', '_', $element['#type']);
  }
  if (isset($element['#views_display_id'])) {
    $variables['label']['#views_display_id'] = str_replace('-', '_', $element['#views_display_id']);
  }
}

/**
 * Attaches form id to all form elements.
 *
 * @param $form
 *   The form or form element which children should have form id attached.
 * @param $form_id
 *   The form id attached to form elements.
 *
 */
function lark_forms_attach_form_id(&$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    lark_forms_attach_form_id($form[$child], $form_id);
  }
}

/**
 * Attaches views display id to all form elements
 *
 * @param $form
 *   The form or form element which children should have views display id attached.
 * @param $views_display_id
 *   The views display id attached to form elements.
 *
 */
function lark_forms_attach_views_display_id(&$form, $views_display_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#views_display_id'])) {
      $form[$child]['#views_display_id'] = $views_display_id;
    }
    lark_forms_attach_views_display_id($form[$child], $views_display_id);
  }
}
