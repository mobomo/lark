<?php
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\views\Form\ViewsForm;
use Drupal\views\ViewExecutable;

function lark_preprocess_page(&$variables) {
  $shortcuts = shortcut_renderable_links();
  $variables['shortcuts'] = $shortcuts;
}

/**
 * Implements hook_form_system_theme_settings_alter().
 */
function lark_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id = NULL) {
  // Work around for core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $form['lark_color'] = array(
    '#type'   => 'textfield',
    '#title'  => t('Primary color'),
    '#default_value' => theme_get_setting('lark_color'),
    '#description' => t('Provide a hexadecimal value to use as the theme\'s primary color.'),
  );
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function lark_forms_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  lark_forms_attach_form_id($form, $form_id);
  if ($form_id === 'views_exposed_form') {
    $display_id = str_replace('views-exposed-form-', '', $form['#id']);
    $display_id = str_replace('-', '_', $display_id);
    lark_forms_attach_views_display_id($form, $display_id);
  }
}

/**
 * Implements hook_theme_suggestions_form_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  // Add form suggestions for form--form-id.html.twig.
  $element = $variables['element'];
  $suggestions[] = 'form__' . str_replace('-', '_', $element['#form_id']);
  $suggestions[] = 'form__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#id']);
}

/**
 * Implements hook_theme_suggestions_container_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_container_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#type']) && $element['#type'] != 'container') {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#type']);
    if (isset($element['#attributes']['data-twig-suggestion'])) {
      $suggestions[] = 'container__' . str_replace('-', '_', $element['#type']) . '__' . str_replace('-', '_', $element['#attributes']['data-twig-suggestion']);
    }
  }

  if(isset($element['#id'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#id']);
  }

  if (isset($element['#type']) && $element['#type'] == 'container' && isset($element['children']['#type'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['children']['#type']);
  }
  if (isset($variables['element']['#type']) && isset($element['#name'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#type']) . '__' . str_replace('-', '_', $element['#name']);
  }
  if (isset($variables['element']['#type']) && isset($element['#name']) && isset($element['#display_id'])) {
    $suggestions[] = 'container__' . str_replace('-', '_', $element['#type']) . '__' . str_replace('-', '_', $element['#name']) . '__' . str_replace('-', '_', $element['#display_id']);
  }

}

/**
 * Implements hook_theme_suggestions_input_alter().
 *
 * @param $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestion_suffix = str_replace(['-'], '_', $element['#attributes']['data-twig-suggestion']);
    $suggestions[] = 'input__' . str_replace('-', '_', $element['#type']) . '__' . $suggestion_suffix;
  }
}

/**
 * Implements hook_theme_suggestions_select_alter().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_select_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if (isset($element['#attributes']['data-twig-suggestion'])) {
    $suggestions[] = 'select__' . str_replace('-', '_', $element['#attributes']['data-twig-suggestion']);
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function lark_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  foreach (\Drupal\Core\Render\Element::children($form) as $key) {
    $form[$key]['#attributes']['data-twig-suggestion'] = $form['#id'];
  }

  $form['actions']['submit']['#attributes']['data-twig-suggestion'] = $form['#id'];

  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ViewsForm && strpos($form_object->getBaseFormId(), 'views_form_media_library') === 0) {
    if (isset($form['header'])) {
      $form['header']['#attributes']['class'][] = 'media-library-views-form__header';
      $form['header']['media_bulk_form']['#attributes']['class'][] = 'media-library-views-form__bulk_form';
    }
    $form['actions']['submit']['#attributes']['class'] = ['media-library-select'];

    if (!isset($form['#attributes']['class']) || !in_array('media-library-views-form', $form['#attributes']['class'])) {
      $form['#attributes']['class'][] = 'media-library-views-form';
    }
  }
  // Add after build to add a CSS class to the form actions.
  if ($form_id === 'views_exposed_form' && strpos($form['#id'], 'views-exposed-form-media-library-widget') === 0) {
    $form['actions']['#attributes']['class'][] = 'media-library-view--form-actions';
  }
}

/**
 * Implements hook_theme_suggestions_form_element().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  if (!empty($element['#type'])) {
    $suggestions[] = 'form_element__type__' . str_replace('-', '_', $element['#type']);
    if (isset($element['#attributes']['data-twig-suggestion'])) {
      $suggestions[] = 'form_element__type__' . str_replace('-', '_', $element['#type']) . '__' . str_replace('-', '_', $element['#attributes']['data-twig-suggestion']);
    }
  }

  if (isset($element['#form_id'])) {
    $suggestions[] = 'form_element__form_id__' . str_replace('-', '_', $element['#form_id']);
    if (!empty($element['#type'])) {
      $suggestions[] = 'form_element__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#type']);
    }
  }

  if (isset($element['#views_display_id'])) {
    $suggestions[] = 'form_element__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#views_display_id']);
    if (!empty($element['#type'])) {
      $suggestions[] = 'form_element__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#views_display_id']) . '__' . str_replace('-', '_', $element['#type']);
    }
  }
}

/**
 * Implements hook_theme_suggestions_form_element_label().
 *
 * @param array $suggestions
 * @param array $variables
 */
function lark_theme_suggestions_form_element_label_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];

  if (isset($element['#form_element_type'])) {
    $suggestions[] = 'form_element_label__type__' . str_replace('-', '_', $element['#form_element_type']);
  }
  if (isset($element['#form_id'])) {
    $suggestions[] = 'form_element_label__form-id__' . str_replace('-', '_', $element['#form_id']);
  }
  if (isset($element['#form_element_type']) && isset($element['#form_id'])) {
    $suggestions[] = 'form_element_label__' . str_replace('-', '_', $element['#form_id']) . '__' . str_replace('-', '_', $element['#form_element_type']);
  }
  if (isset($element['#views_display_id'])) {
    $suggestions[] = 'form_element_label__views_exposed_form__' . str_replace('-', '_', $element['#views_display_id']);
  }
  if (isset($element['#views_display_id']) && isset($element['#form_id'])) {
    $suggestions[] = 'form_element_label__views_exposed_form__' . str_replace('-', '_', $element['#views_display_id']) . '__' . str_replace('-', '_', $element['#form_element_type']);
  }

}

/**
 * Implements hook_preprocess_form_element().
 */
function lark_preprocess_form_element(array &$variables) {
  $element = $variables['element'];

  if (!isset($variables['label'])) {
    return;
  }

  if (isset($element['#form_id'])) {
    $variables['label']['#form_id'] = str_replace('-', '_', $element['#form_id']);
  }
  if (isset($element['#type'])) {
    $variables['label']['#form_element_type'] = str_replace('-', '_', $element['#type']);
  }
  if (isset($element['#views_display_id'])) {
    $variables['label']['#views_display_id'] = str_replace('-', '_', $element['#views_display_id']);
  }
}

/**
 * Attaches form id to all form elements.
 *
 * @param $form
 *   The form or form element which children should have form id attached.
 * @param $form_id
 *   The form id attached to form elements.
 *
 */
function lark_forms_attach_form_id(&$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#form_id'])) {
      $form[$child]['#form_id'] = $form_id;
    }
    lark_forms_attach_form_id($form[$child], $form_id);
  }
}

/**
 * Attaches views display id to all form elements
 *
 * @param $form
 *   The form or form element which children should have views display id attached.
 * @param $views_display_id
 *   The views display id attached to form elements.
 *
 */
function lark_forms_attach_views_display_id(&$form, $views_display_id) {
  foreach (Element::children($form) as $child) {
    if (!isset($form[$child]['#views_display_id'])) {
      $form[$child]['#views_display_id'] = $views_display_id;
    }
    lark_forms_attach_views_display_id($form[$child], $views_display_id);
  }
}

/**
 * Implements hook_views_pre_render().
 */
function lark_views_pre_render(ViewExecutable $view) {
  $add_classes = function (&$option, array $classes_to_add) {
    $classes = preg_split('/\s+/', $option);
    $classes = array_filter($classes);
    $classes = array_merge($classes, $classes_to_add);
    $option = implode(' ', array_unique($classes));
  };

  if ($view->id() === 'media_library') {
    if ($view->display_handler->options['defaults']['css_class']) {
      $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view']);
    }
    else {
      $add_classes($view->display_handler->options['css_class'], ['media-library-view']);
    }

    if ($view->current_display === 'page') {
      if (array_key_exists('media_bulk_form', $view->field)) {
        $add_classes($view->field['media_bulk_form']->options['element_class'], ['media-library-item__click-to-select-checkbox']);
      }
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('edit_media', $view->field)) {
        $add_classes($view->field['edit_media']->options['alter']['link_class'], ['media-library-item__edit']);
      }
      if (array_key_exists('delete_media', $view->field)) {
        $add_classes($view->field['delete_media']->options['alter']['link_class'], ['media-library-item__remove']);
      }
    }
    elseif (strpos($view->current_display, 'widget') === 0) {
      if (array_key_exists('rendered_entity', $view->field)) {
        $add_classes($view->field['rendered_entity']->options['element_class'], ['media-library-item__content']);
      }
      if (array_key_exists('media_library_select_form', $view->field)) {
        $add_classes($view->field['media_library_select_form']->options['element_wrapper_class'], ['media-library-item__click-to-select-checkbox']);
      }

      if ($view->display_handler->options['defaults']['css_class']) {
        $add_classes($view->displayHandlers->get('default')->options['css_class'], ['media-library-view--widget']);
      }
      else {
        $add_classes($view->display_handler->options['css_class'], ['media-library-view--widget']);
      }
    }
  }
}

/**
 * Implements hook_preprocess_links__media_library_menu().
 *
 * This targets the menu of available media types in the media library's modal
 * dialog.
 *
 * @todo Do this in the relevant template once
 *   https://www.drupal.org/project/drupal/issues/3088856 is resolved.
 * @todo revisit in https://drupal.org/node/3110132
 */
function lark_preprocess_links__media_library_menu(array &$variables) {
  foreach ($variables['links'] as &$link) {
    // This conditional exists because the media-library-menu__link class is
    // currently added by Classy, but Seven will eventually not use Classy as a
    // base theme.
    // @todo remove conditional, keep class addition in
    //   https://drupal.org/node/3110137
    // @see https://www.drupal.org/node/3109287
    // @see classy_preprocess_links__media_library_menu()
    if (!isset($link['link']['#options']['attributes']['class']) || !in_array('media-library-menu__link', $link['link']['#options']['attributes']['class'])) {
      $link['link']['#options']['attributes']['class'][] = 'media-library-menu__link';
    }
  }
}

/**
 * @todo Remove this when https://www.drupal.org/project/drupal/issues/2999549
 * lands.
 *
 * @see \Drupal\media_library\Plugin\Field\FieldWidget\MediaLibraryWidget::formElement()
 */
function lark_preprocess_fieldset__media_library_widget(array &$variables) {
  if (isset($variables['prefix']['weight_toggle'])) {
    $variables['prefix']['weight_toggle']['#attributes']['class'][] = 'media-library-widget__toggle-weight';
  }
  if (isset($variables['suffix']['open_button'])) {
    $variables['suffix']['open_button']['#attributes']['class'][] = 'media-library-open-button';
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 *
 * This targets each rendered media item in the grid display of the media
 * library's modal dialog.
 */
function lark_preprocess_views_view_fields__media_library(array &$variables) {
  // Add classes to media rendered entity field so it can be targeted for
  // styling. Adding this class in a template is very difficult to do.
  if (isset($variables['fields']['rendered_entity']->wrapper_attributes)) {
    $variables['fields']['rendered_entity']->wrapper_attributes->addClass('media-library-item__click-to-select-trigger');
  }
}


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function lark_form_media_library_add_form_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['class'][] = 'media-library-add-form';
  $form['#attached']['library'][] = 'lark/media_library';

  // If there are unsaved media items, apply styling classes to various parts
  // of the form.
  if (isset($form['media'])) {
    $form['#attributes']['class'][] = 'media-library-add-form--with-input';

    // Put a wrapper around the informational message above the unsaved media
    // items.
    $form['description']['#template'] = '<p class="media-library-add-form__description">{{ text }}</p>';
  }
  else {
    $form['#attributes']['class'][] = 'media-library-add-form--without-input';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lark_form_media_library_add_form_upload_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['class'][] = 'media-library-add-form--upload';

  if (isset($form['container'])) {
    $form['container']['#attributes']['class'][] = 'media-library-add-form__input-wrapper';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lark_form_media_library_add_form_oembed_alter(array &$form, FormStateInterface $form_state) {
  $form['#attributes']['class'][] = 'media-library-add-form--oembed';

  // If no media items have been added yet, add a couple of styling classes
  // to the initial URL form.
  if (isset($form['container'])) {
    $form['container']['#attributes']['class'][] = 'media-library-add-form__input-wrapper';
    $form['container']['url']['#attributes']['class'][] = 'media-library-add-form-oembed-url';
    $form['container']['submit']['#attributes']['class'][] = 'media-library-add-form-oembed-submit';
  }
}

/**
 * Implements hook_preprocess_item_list__media_library_add_form_media_list().
 *
 * This targets each new, unsaved media item added to the media library, before
 * they are saved.
 */
function lark_preprocess_item_list__media_library_add_form_media_list(array &$variables) {
  foreach ($variables['items'] as &$item) {
    $item['value']['preview']['#attributes']['class'][] = 'media-library-add-form__preview';
    $item['value']['fields']['#attributes']['class'][] = 'media-library-add-form__fields';
    $item['value']['remove_button']['#attributes']['class'][] = 'media-library-add-form__remove-button';

    // #source_field_name is set by AddFormBase::buildEntityFormElement()
    // to help themes and form_alter hooks identify the source field.
    $fields = &$item['value']['fields'];
    $source_field_name = $fields['#source_field_name'];
    if (isset($fields[$source_field_name])) {
      $fields[$source_field_name]['#attributes']['class'][] = 'media-library-add-form__source-field';
    }
  }
}

/**
 * Implements hook_preprocess_media_library_item__widget().
 *
 * This targets each media item selected in an entity reference field.
 */
function lark_preprocess_media_library_item__widget(array &$variables) {
  $variables['content']['remove_button']['#attributes']['class'][] = 'media-library-item__remove';
}

/**
 * Implements hook_preprocess_media_library_item__small().
 *
 * This targets each pre-selected media item selected when adding new media in
 * the modal media library dialog.
 */
function lark_preprocess_media_library_item__small(array &$variables) {
  $variables['content']['select']['#attributes']['class'][] = 'media-library-item__click-to-select-checkbox';
}
